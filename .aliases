# helpers

echoRun() {
  echo "✨ running: $@ ✨"
  eval $@
}


# architecture

## Rosetta 2 prefix for Intel compatibility (some more aliases for these commands are defined below
## for zsh and brew

intel() { echoRun arch -x86_64 $@ }
arm() { echoRun arch -arm64e $@ }

## switch current Zsh instance to Rosetta 2 mode for Intel compatibility (e.g. intalling Node 14)

izsh() { intel zsh $@ }

## separate brew installations for Intel and ARM/M1 compatibility

ibrew() { intel /usr/local/bin/brew $@ }
mbrew() { arm /opt/homebrew/bin/brew $@ }


# cd

## ~/Google Drive

dirg() { echoRun cd ~/Google\ Drive/My\ Drive $@ }

## ~/dev

dirdev() { echoRun cd ~/dev $@ }

## ~/dev/UNEP-WCMC

diruw() { echoRun cd ~/dev/UNEP-WCMC $@ }


# git (most aliases are defined in .gitconfig)

g() { echoRun git $@ }

## admin

alias gRefreshHooks="~/.git-templates-related/hooks/reload-hook-templates"

gRefreshHooksInImmediateSubdirs() {
    echo "✨ running: for d in ./*/ ; do (cd "$d" && gRefreshHooks); done ✨"
    for d in ./*/ ; do (cd "$d" && gRefreshHooks); done
}

gCleanBranches() {
    if [[ $# -eq 1 ]]
    then
        echoRun "git branch --merged origin/$1 | grep -v main | grep -v develop | xargs git branch -d";
    else
        echo usage: gCleanBranches working-base-branch
    fi
}

## common commands

ga() { g add $@ }
gb() { g branch $@ }
gbd() { g branch -D $@ }
gbi() { g bisect $@ }
gch() { g checkout $@ }
gchb() { g checkout -b $@ }
gcl() { g clone $@ }
gco() { g commit $@ }
gcoa() { g commit --amend $@ }
gcoane() { g commit --amend --no-edit $@ }
gcom() { g commit -m $@ }
gd() { g diff $@ }
gf() { g fetch $@ }
gi() { g init $@ }
gl() { g "log --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'" $@ }
glall() { g "log --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all" $@ }
glgraph() { g "log --graph --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'" $@ }
glgraphall() { g "log --graph --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all" $@ }
gm() { g merge $@ }
gph() { g push $@ }
gphf() { g push --force-with-lease $@ }
gphu() { g push -u origin HEAD $@ }
gpl() { g pull $@ }
gr() { g reset $@ }
gs() { g status $@ }
gsh() { g stash $@ }


# ls

lsdot() { echoRun ls -dp .* $@ }


# npm

np() { echoRun npm $@ }
npi() { np install $@ }


# nvm

nv() { echoRun nvm $@ }
nvu() { nv use $@ }


# Ruby/Rails

b() { echoRun bundle $@ }
be() { b exec $@ }

ra() { echoRun rails $@ }
rac() { ra console $@ }
rar() { ra routes -E $@ }
rarg() { rar -g $@ }
ras() { ra server $@ }

## reset database: drop, create, migrate, seed

radbr() {
    printf "いいですね! Resetting database (drop, create, migrate, seed) 💫 \n\n"
    printf "はい！Dropping db 💧\n\n"
    rails db:drop
    printf "\nはい！Creating fresh db 🍅 \n\n"
    rails db:create
    printf "\nはい！Miiigrating ✈️  \n\n"
    rails db:migrate
    printf "はい！Seeding 🌱 \n"
    rails db:seed
}


# Ruby/Rails + Yarn

## bundle install, yarn install

byi() {
    printf "いいですね! Installing packages (bundle, yarn) 💫 \n\n"
    printf "はい！Bundling 📦 \n\n"
    bundle install
    printf "\nはい！Yarning 🐑 \n\n"
    yarn install
}

byis() {
    byi
    printf "\nはい！Serving 💅 \n\n"
    rails s
}


# webpack

wds() { echoRun bin/webpack-dev-server $@ }


# Yarn

y() { echoRun yarn $@ }
yd() { y dev $@ }
yi() { y install $@ }
